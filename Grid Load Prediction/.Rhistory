knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
path <- "C:\\Users\\blume\\OneDrive\\Desktop\\CUNY MSDS\\Data 607 Data Qcquisition and Management\\Final Project\\data\\weather.txt"
x <- read.table(path)
x <- read.table(path)
x <- read.table(path)
x <- read.delim(path)
View(x)
x1 <- x[1,]
x1 <- x[2,]
x1 <- x[2,]
x <- read.delim(path, stringsAsFactors = FALSE)
x1 <- x[2,]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
x2 <- str_extract(x2)
x2 <- str_extract_all(x2)
x2 <- str_extract(x2, pattern = " ")
x2 <- str_extract(x1, pattern = " ")
x2 <- str_split(x1, pattern = " ")
View(x2)
x2
x2 <- str_split(x1, pattern = "/t")
x2
x2[2]
x2[4]
x2[1]
x2 <- str_split(x1, pattern = " ")
x2
x2 <- str_split(x1, pattern = "  ")
x2
x2 <- str_split(x1, pattern = "    ")
x2
weather <- str_split(x, pattern = "    ")
View(weather)
weather <- as.data.frame(str_split(x, pattern = "    "))
View(weather)
x2 <- str_split(x1, pattern = "    ")
x2
x2 <- str_extract(x1, pattern = "    ")
x2 <- str_extract(x1, pattern = "^\\S+\\s+")
x2 <- str_extract(x1, pattern = "^\\S*+\\s+")
x2 <- str_extract(x1, pattern = "^\\S*\\s+")
x2 <- str_extract(x1, pattern = ""\\w+\\s+"")
x2 <- str_extract(x1, pattern = "\\w+\\s+")
x2 <- str_extract(x1, pattern = "\\w+\\s+")
x2 <- str_split(x1, pattern = " ")
x2 <- str_split(x1, pattern = " ")
x2 <- str_split(x2, pattern = " ")
x2 <- str_split(x1, pattern = "  ")
x2 <- str_split(x1, pattern = "   ")
x2 <- str_split(x1, pattern = "    ")
x2
x2 <- str_split(x1, pattern = "     ")
x2
x2 <- str_split(x1, pattern = "    ")
x2
x2 <- str_split(x1, pattern = " ")
x2
weather[1,] <- as.data.frame(str_split(x, pattern = "    "))
x2 <- str_split(x1, pattern = "  ")
x2
weather[1,] <- str_split(x1, pattern = "  ")
weather <- NULL
weather[1,] <- str_split(x1, pattern = "  ")
weather <- as.data.frame
weather <- as.data.frame(weather)
as.data.frame(weather)
weather <- NULL
as.data.frame(weather)
weather[1,] <- str_split(x1, pattern = "  ")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
library(stringi)
library(anchors)
#Reads the file
energy <- read.csv("https://raw.githubusercontent.com/davidblumenstiel/data/master/energyPJM/hrl_load_2010-2020.csv", stringsAsFactors = FALSE)
#Changes the datetime strings to datetime objects
energy$datetime <- as.POSIXct.default(energy$datetime_beginning_ept, format = "%m/%d/%Y %I:%M:%S %p")
#Removes a few variables that aren't really relevant, like region (I purposefully downloaded all of the same region), 'is.verified' (by the distribution company; most of it is), and the origional date-time strings (we're gonna use the variable we just made, which is EPT)
energy[,c(1:6,8)] <- NULL
#What's the data look like
head(energy)
#Summary statistics
summary(energy$mw)
#Histogram
hist(energy$mw, main = "Hourly Grid Load", xlab = "Load (MW)")
# Importing the raw file, and initializing an empty data frame
path <- "https://raw.githubusercontent.com/davidblumenstiel/data/master/weatherNOAA/weather.txt"
x <- read.delim(path, stringsAsFactors = FALSE)
weather <- data.frame(matrix(ncol = 19))
# There are more elegant ways to do this, but nothing quite as entertaining
i = 2
while (i < nrow(x)) {
split = strsplit(x[i,], "    ")[[1]]
j = 1
while (j < length(split)) {
buff = split[j]
if (buff == "") {
j = j + 1
}
else {
weather[i - 1,j] <- buff
j = j + 1
}
}
i = i + 1
}
# Further straightening
i = 0
while (i < nrow(weather)) {
i = i + 1
if (is.na(weather[i,7]) == FALSE) {
weather[i,8:21] <- weather[i,7:20]
}
else if (is.na(weather[i,8]) == TRUE) {
weather[i,8:21] <- weather[i,9:22]
}
}
# Now we need to seperate out the dates from other information we dont need
weather$date <- stringr::str_extract(weather[,8], '\\d{8}')
# Getting rid of everything we won't need (keeping station name, date, percipitation and snow)
weather <- weather[,c(1,10,12,26)]
colnames(weather) <- c("Station", "Rain_mm", "Snow_mm", "Date")
# The text file represents missing data as -9999.  This changes those to NA.
# One note: the data cleaning thus far has introduced some NA's into the dataframe, but those occur where -9999s would have occured
weather <- replace.value(weather, names = colnames(weather), from = "-9999", to = NA) # Handy function from 'anchors'
weather <- replace.value(weather, names = colnames(weather), from = "   -9999", to = NA)
weather <- replace.value(weather, names = colnames(weather), from = "  -9999", to = NA)
weather <- replace.value(weather, names = colnames(weather), from = " -9999", to = NA)
# Setting the data types
weather$Rain_mm <- as.numeric(weather$Rain_mm)
weather$Snow_mm <- as.numeric(weather$Snow_mm)
weather$Date <- as.POSIXct(weather$Date, format = "%Y%m%d")
weather <- weather %>%
group_by(Date) %>%
summarise(Rain_mm = mean(Rain_mm, na.rm = TRUE), Snow_mm = mean(Snow_mm, na.rm = TRUE))
#Had one extra day (Jan-1-2020).  Removed it to allign with energy data
weather <- weather[c(1:3652),]
head(weather)
summary(weather)
par(mfrow=c(1,2))
hist(weather$Rain_mm, main = "Daily Rain", xlab = "Rain (mm)")
hist(weather$Snow_mm, main = "Daily Snow", xlab = "Snow (mm)")
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-01-01" & as.Date(energy$datetime) <= "2015-01-05",]
January <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="blue", size=1.0) +
scale_x_datetime(date_breaks = "12 hours") +
labs(title = "January", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-04-01" & as.Date(energy$datetime) <= "2015-04-05",]
April <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="green", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "April", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-07-01" & as.Date(energy$datetime) <= "2015-07-05",]
July <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="red", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "July", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-10-01" & as.Date(energy$datetime) <= "2015-10-05",]
October <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="brown", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "October", x = "Date Time", y = "MW")
gridExtra::grid.arrange(January, April, July, October, nrow = 4)
ggplot(weather, aes(Date)) +
geom_step(aes(y = Rain_mm, color="Rain")) +
geom_step(aes(y = Snow_mm, color="Snow")) +
scale_color_manual(values=c("Rain"="blue","Snow"="red")) +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Precipitation", x = "Date", y = "MM Snow/Rain", colour = "Precipitation")
ggplot(weather[as.Date(weather$Date) >= "2015-01-01" & as.Date(weather$Date) <= "2015-12-31",], aes(Date)) +
geom_step(aes(y = Rain_mm, color="Rain")) +
geom_step(aes(y = Snow_mm, color="Snow")) +
scale_color_manual(values=c("Rain"="blue","Snow"="red")) +
scale_x_datetime(date_breaks = "1 month") +
labs(title = "2015 Precipitation", x = "Date", y = "MM Snow/Rain", colour = "Precipitation")
energy <- energy %>%
mutate(date = as.Date.character(datetime)) %>%
group_by(date) %>%
summarise(MW = mean(mw, na.rm = TRUE))
ggplot(energy, aes(x = as.POSIXct.Date(date), y = MW)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Daily Average", x = "Date", y = "MW")
df <- cbind(energy, weather)
#Scraps the now reduant date variable
df[3] <- NULL
# Becuase energy over time acts like a wave, we can use angular terms to define it within the model
# Each cycle is 365.25 days (i.e. 1 year)
# 4pi becuase we're going for 2 cycles per year, as both summer and winter are high points, while autumn and spring are low
# Also added the plain date variable to account for macro-changes over time
term1 <- sin(4*pi * as.numeric(df$date)/365.25)
term2 <- cos(4*pi * as.numeric(df$date)/365.25)
model <- lm(MW ~  date + term1 + term2, data = df)
plot(df$MW ~ df$date, col = "blue", xlab = "Date", ylab = "Average Daily Load (MW)")
lines(fitted(model) ~ df$date, col = "red", lwd = "2")
summary(model)
modelImproved <- lm(MW ~ date + term1 + term2 + Rain_mm, data = df)
summary(modelImproved)
# Becuase energy over time acts like a wave, we can use angular terms to define it within the model
# Each cycle is 365.25 days (i.e. 1 year)
# 4pi becuase we're going for 2 cycles per year, as both summer and winter are high points, while autumn and spring are low
# Also added the plain date variable to account for macro-changes over time
term1 <- sin(4*pi * as.numeric(df$date)/365.25)
term2 <- cos(4*pi * as.numeric(df$date)/365.25)
model <- lm(MW ~  date + term1 + term2, data = df)
plot(df$MW ~ df$date, col = "black", xlab = "Date", ylab = "Average Daily Load (MW)")
lines(fitted(model) ~ df$date, col = "red", lwd = "2")
summary(model)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
library(stringi)
library(anchors)
model$coefficients
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
library(stringi)
library(anchors)
save.image()
png(filename="energy_total.png")
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
library(stringi)
library(anchors)
#Reads the file
energy <- read.csv("https://raw.githubusercontent.com/davidblumenstiel/data/master/energyPJM/hrl_load_2010-2020.csv", stringsAsFactors = FALSE)
#Changes the datetime strings to datetime objects
energy$datetime <- as.POSIXct.default(energy$datetime_beginning_ept, format = "%m/%d/%Y %I:%M:%S %p")
#Removes a few variables that aren't really relevant, like region (I purposefully downloaded all of the same region), 'is.verified' (by the distribution company; most of it is), and the origional date-time strings (we're gonna use the variable we just made, which is EPT)
energy[,c(1:6,8)] <- NULL
#What's the data look like
head(energy)
#Summary statistics
summary(energy$mw)
#Histogram
hist(energy$mw, main = "Hourly Grid Load", xlab = "Load (MW)")
# Importing the raw file, and initializing an empty data frame
path <- "https://raw.githubusercontent.com/davidblumenstiel/data/master/weatherNOAA/weather.txt"
x <- read.delim(path, stringsAsFactors = FALSE)
weather <- data.frame(matrix(ncol = 19))
# There are more elegant ways to do this, but nothing quite as entertaining
i = 2
while (i < nrow(x)) {
split = strsplit(x[i,], "    ")[[1]]
j = 1
while (j < length(split)) {
buff = split[j]
if (buff == "") {
j = j + 1
}
else {
weather[i - 1,j] <- buff
j = j + 1
}
}
i = i + 1
}
# Further straightening
i = 0
while (i < nrow(weather)) {
i = i + 1
if (is.na(weather[i,7]) == FALSE) {
weather[i,8:21] <- weather[i,7:20]
}
else if (is.na(weather[i,8]) == TRUE) {
weather[i,8:21] <- weather[i,9:22]
}
}
# Now we need to seperate out the dates from other information we dont need
weather$date <- stringr::str_extract(weather[,8], '\\d{8}')
# Getting rid of everything we won't need (keeping station name, date, percipitation and snow)
weather <- weather[,c(1,10,12,26)]
colnames(weather) <- c("Station", "Rain_mm", "Snow_mm", "Date")
# The text file represents missing data as -9999.  This changes those to NA.
# One note: the data cleaning thus far has introduced some NA's into the dataframe, but those occur where -9999s would have occured
weather <- replace.value(weather, names = colnames(weather), from = "-9999", to = NA) # Handy function from 'anchors'
weather <- replace.value(weather, names = colnames(weather), from = "   -9999", to = NA)
weather <- replace.value(weather, names = colnames(weather), from = "  -9999", to = NA)
weather <- replace.value(weather, names = colnames(weather), from = " -9999", to = NA)
# Setting the data types
weather$Rain_mm <- as.numeric(weather$Rain_mm)
weather$Snow_mm <- as.numeric(weather$Snow_mm)
weather$Date <- as.POSIXct(weather$Date, format = "%Y%m%d")
weather <- weather %>%
group_by(Date) %>%
summarise(Rain_mm = mean(Rain_mm, na.rm = TRUE), Snow_mm = mean(Snow_mm, na.rm = TRUE))
#Had one extra day (Jan-1-2020).  Removed it to allign with energy data
weather <- weather[c(1:3652),]
head(weather)
summary(weather)
par(mfrow=c(1,2))
hist(weather$Rain_mm, main = "Daily Rain", xlab = "Rain (mm)")
hist(weather$Snow_mm, main = "Daily Snow", xlab = "Snow (mm)")
png(filename="energy_total.png")
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
png(filename="energy_total.png", width = 960)
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
png(filename="energy_total.png", width = 960)
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
png(filename="energy_total.png", width = 960)
ggplot(energy, aes(x = datetime, y = mw)) + geom_step(color="blue") +
scale_x_datetime(date_breaks = "1 year") +
labs(title = "10 Year Energy Load Hourly Average", x = "Date", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-01-01" & as.Date(energy$datetime) <= "2015-01-05",]
January <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="blue", size=1.0) +
scale_x_datetime(date_breaks = "12 hours") +
labs(title = "January", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-04-01" & as.Date(energy$datetime) <= "2015-04-05",]
April <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="green", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "April", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-07-01" & as.Date(energy$datetime) <= "2015-07-05",]
July <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="red", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "July", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-10-01" & as.Date(energy$datetime) <= "2015-10-05",]
October <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="brown", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "October", x = "Date Time", y = "MW")
gridExtra::grid.arrange(January, April, July, October, nrow = 4)
selectdates <- energy[as.Date(energy$datetime) >= "2015-01-01" & as.Date(energy$datetime) <= "2015-01-05",]
png(filename="energy_total.png", width = 960, height = 780)
January <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="blue", size=1.0) +
scale_x_datetime(date_breaks = "12 hours") +
labs(title = "January", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-04-01" & as.Date(energy$datetime) <= "2015-04-05",]
April <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="green", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "April", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-07-01" & as.Date(energy$datetime) <= "2015-07-05",]
July <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="red", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "July", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-10-01" & as.Date(energy$datetime) <= "2015-10-05",]
October <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="brown", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "October", x = "Date Time", y = "MW")
gridExtra::grid.arrange(January, April, July, October, nrow = 4)
selectdates <- energy[as.Date(energy$datetime) >= "2015-01-01" & as.Date(energy$datetime) <= "2015-01-05",]
png(filename="energy_seasonal.png", width = 960, height = 780)
January <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="blue", size=1.0) +
scale_x_datetime(date_breaks = "12 hours") +
labs(title = "January", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-04-01" & as.Date(energy$datetime) <= "2015-04-05",]
April <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="green", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "April", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-07-01" & as.Date(energy$datetime) <= "2015-07-05",]
July <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="red", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "July", x = "Date Time", y = "MW")
selectdates <- energy[as.Date(energy$datetime) >= "2015-10-01" & as.Date(energy$datetime) <= "2015-10-05",]
October <- ggplot(selectdates, aes(x = datetime, y = mw)) +
geom_line(color="brown", size=1.0) +
scale_x_datetime(date_breaks = "12 hours")+
labs(title = "October", x = "Date Time", y = "MW")
gridExtra::grid.arrange(January, April, July, October, nrow = 4)
install.packages("rmdformats")
